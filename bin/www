#!/usr/bin/env node

/**
 * Module dependencies.
 */
// www 파일이 서버에 관한 모듈을 가져와서 연결함.
// app.js의 파일을 가져옴 : app.js는 주소와 모듈 관리
var app = require("../app");
var debug = require("debug")("chating-app:server");
var http = require("http");
// 설치한 socket.io모듈 불러오기
const socket = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// http서버를 socket과 연결
const io = socket(server);

// io를 통해 'connection' 이벤트가 발생한다면, 아래내용 실행
// 서버측 실행 내용
/** 2. io를 통해 소켓 연결 확인 후 양방향연결 */
io.sockets.on("connection", function (socket) {
  console.log("유저접속됨");

  /** 4. 보내준 send 이벤트를 확인 및 함수 실행 */
  socket.on("send", function (data) {
    console.log("전달된 메시지 :", data.msg);
    //  io를 통해서 send이벤트 생성 후 data값과 함께 보내기
    /** 5. 모든 소켓(연결된 브라우저)에게 이벤트+데이터를 보냄 */
    io.emit("send", data);
  });
  socket.on("disconnect", function () {
    console.log("접속종료");
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  console.log("서버실행중");
}